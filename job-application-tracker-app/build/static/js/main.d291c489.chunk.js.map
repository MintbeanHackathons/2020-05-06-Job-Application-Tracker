{"version":3,"sources":["Components/JobApplicationForm.js","shared/data.js","Components/TrackerList.js","App.js","serviceWorker.js","index.js"],"names":["JobApplicationForm","props","className","id","Form","FormGroup","row","Col","md","size","offset","Label","for","Input","type","name","placeholder","multiple","Button","outline","color","block","DATA","company","jobDescriptionUrl","notes","createdAt","updatedAt","RenderTable","state","data","scope","this","map","item","Component","TrackerList","Table","dark","App","list","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d291c489.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button, Form, FormGroup, Label, Input, Col } from 'reactstrap';\r\n\r\nconst JobApplicationForm = (props) => {\r\n  return (\r\n    <div className=\"container\" id=\"trackerForm\">\r\n      <Form>\r\n        <FormGroup row>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Label for=\"companyName\">Company Name</Label>\r\n          </Col>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Input type=\"companyName\" name=\"companyName\" id=\"companyName\" placeholder=\"Company Name you applied for\" />\r\n          </Col>\r\n        </FormGroup>\r\n        <FormGroup row>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Label for=\"jobDescription\">Job Description</Label>\r\n          </Col>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Input type=\"jobDescription\" name=\"jobDescription\" id=\"jobDescription\" placeholder=\"Enter name or link to position\" />\r\n          </Col>\r\n        </FormGroup>\r\n        <FormGroup row>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Label for=\"hireProcess\">Select Hiring Processes</Label>\r\n          </Col>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Input type=\"select\" name=\"hireProcess\" id=\"hireProcess\" multiple>\r\n              <option>Introductionary email</option>\r\n              <option>Online Development test</option>\r\n              <option>Conference Interview</option>\r\n              <option>In Person Interview</option>\r\n              <option>Rejected</option>\r\n              <option>Accepted/waiting for offer</option>\r\n            </Input>\r\n          </Col>\r\n        </FormGroup>\r\n        <FormGroup row>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Label for=\"notes\">Notes</Label>\r\n          </Col>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Input type=\"textarea\" name=\"notes\" id=\"notes\" />\r\n          </Col>\r\n\r\n        </FormGroup>\r\n        <FormGroup row>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Label for=\"createdAt\">Created At</Label>\r\n          </Col>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Input\r\n              type=\"date\"\r\n              name=\"createdDate\"\r\n              id=\"createdAt\"\r\n              placeholder=\"date of creation\"\r\n            />\r\n          </Col>\r\n        </FormGroup>\r\n        <FormGroup row>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Label for=\"updatedAt\">Updated Ate</Label>\r\n          </Col>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Input\r\n              type=\"date\"\r\n              name=\"updatedDate\"\r\n              id=\"updatedAt\"\r\n              placeholder=\"date of update\"\r\n            />\r\n          </Col>\r\n        </FormGroup>\r\n        <FormGroup row>\r\n          <Col md={{ size: 10, offset: 1 }}>\r\n            <Button outline color=\"success\" block>Save</Button>\r\n          </Col>\r\n        </FormGroup>\r\n      </Form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default JobApplicationForm;","export const DATA =[\r\n        {\r\n            id: 1,\r\n            type: \"PhoneInterviewComplete\",\r\n            company: \"Acme Inc.\",\r\n            jobDescriptionUrl: \"Junior Software Developer\",\r\n            notes: \"This is a really cool job. The interviewer seemed like a really chill person. I hope they get back to me.\",\r\n            createdAt: \"2020-05-06\",\r\n            updatedAt: \"2020-05-06\"\r\n        }\r\n    ];\r\n","import React, { Component } from 'react';\r\nimport { Table } from 'reactstrap';\r\nimport { DATA } from '../shared/data';\r\n\r\n\r\nclass RenderTable extends Component{\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      data: DATA,\r\n    };\r\n  }\r\n  render () {\r\n\r\n    return(\r\n\r\n        <tr>\r\n        <th scope=\"row\">{this.state.data.map(item => item.id)}</th>\r\n        <td>{this.state.data.map(item => item.company)}</td>\r\n        <td>{this.state.data.map(item => item.jobDescriptionUrl)}</td>\r\n        <td>{this.state.data.map(item => item.type)}</td>\r\n        <td>{this.state.data.map(item => item.notes)}</td>\r\n        <td>{this.state.data.map(item => item.createdAt)}</td>\r\n        <td>{this.state.data.map(item => item.updatedAt)}</td>\r\n      </tr>\r\n    )\r\n  }\r\n}\r\n  \r\n\r\nconst TrackerList = (props) => {\r\n  return (\r\n    <Table dark>\r\n      <thead>\r\n        <tr>\r\n          <th>#</th>\r\n          <th>Company Name</th>\r\n          <th>Job Description</th>\r\n          <th>Hiring Process</th>\r\n          <th>Notes</th>\r\n          <th>Created At</th>\r\n          <th>Updated At</th>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <RenderTable></RenderTable>\r\n      </tbody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default TrackerList;","import React, { Component } from 'react';\nimport JobApplicationForm from './Components/JobApplicationForm';\nimport TrackerList from './Components/TrackerList';\nimport { DATA } from './shared/data';\nimport './App.css';\n\nclass App extends Component{\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: DATA,\n    };\n  }\n  \n  \n  render () {\n\n    return(\n    <div className=\"App\">\n      <div className=\"App-header\">\n        <TrackerList list={this.state.data.map(item => item)}></TrackerList>\n        <h5>Add New Tracking</h5>\n        <JobApplicationForm></JobApplicationForm>\n      </div>\n    </div>)\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}